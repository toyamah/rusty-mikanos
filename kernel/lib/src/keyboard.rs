use crate::message::{Arg, Keyboard, Message, MessageType};
use alloc::collections::VecDeque;

const KEYCODE_MAP: [char; 256] = [
    '\0', '\0', '\0', '\0', 'a', 'b', 'c', 'd', // 0
    'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', // 8
    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', // 16
    'u', 'v', 'w', 'x', 'y', 'z', '1', '2', // 24
    '3', '4', '5', '6', '7', '8', '9', '0', // 32
    '\n', '\x08', '\x08', '\t', ' ', '-', '=', '[', // 40
    ']', '\\', '#', ';', '\'', '`', ',', '.', // 48
    '/', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 56
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 64
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 72
    '\0', '\0', '\0', '\0', '/', '*', '-', '+', // 80
    '\n', '1', '2', '3', '4', '5', '6', '7', // 88
    '8', '9', '0', '.', '\\', '\0', '\0', '=', // 96
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 104
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 112
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 120
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 128
    '\0', '\\', '\0', '\0', '\0', '\0', '\0', '\0', // 136
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 144
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 152
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 160
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 168
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 176
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 184
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 192
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 200
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 208
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 216
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 224
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 232
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 240
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 248
];

pub fn on_input(keycode: u8, msg_queue: &mut VecDeque<Message>) {
    msg_queue.push_back(Message::new(
        MessageType::KeyPush,
        Arg {
            keyboard: Keyboard::new(keycode, KEYCODE_MAP[keycode as usize]),
        },
    ))
}
